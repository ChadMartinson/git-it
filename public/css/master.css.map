{"version":3,"sources":["node_modules/axis/axis/reset.styl","node_modules/axis/node_modules/nib/lib/nib/flex.styl","node_modules/axis/node_modules/nib/lib/nib/vendor.styl","node_modules/axis/node_modules/nib/lib/nib/border.styl","node_modules/axis/node_modules/nib/lib/nib/overflow.styl","node_modules/axis/axis/typography.styl","assets/css/master.styl","node_modules/axis/axis/ui.styl","node_modules/axis/axis/vendor.styl","node_modules/axis/node_modules/nib/lib/nib/clearfix.styl","node_modules/axis/axis/utilities.styl","node_modules/axis/axis/buttons.styl"],"names":[],"mappings":"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","sourcesContent":["// -----\n// Reset\n// -----\n\n// global-reset delegated to nib\n\nsupport-for-ie ?= true\n\n// Mixin: Normalize CSS\n// Based on v3.0.1 https://github.com/necolas/normalize.css\n\nnormalize-css()\n  html\n    font-family: sans-serif\n    -ms-text-size-adjust: 100%\n    -webkit-text-size-adjust: 100%\n\n  body\n    margin: 0\n\n  article, aside, details, figcaption, figure, footer, header, hgroup, main, nav, section, summary\n    display: block\n\n  audio, canvas, progress, video\n    display: inline-block\n    vertical-align: baseline\n\n  audio:not([controls])\n    display: none\n    height: 0\n\n  [hidden], template\n    display: none\n\n  a\n    background: transparent\n\n    &:active, &:hover\n      outline: 0\n\n  abbr[title]\n    border-bottom: 1px dotted\n\n  b, strong\n    font-weight: bold\n\n  dfn\n    font-style: italic\n\n  h1\n    font-size: 2em\n    margin: 0.67em 0\n\n  mark\n    background: #ff0\n    color: #000\n\n  small\n    font-size: 80%\n\n  sub, sup\n    font-size: 75%\n    line-height: 0\n    position: relative\n    vertical-align: baseline\n\n  sup\n    top: -0.5em\n\n  sub\n    bottom: -0.25em\n\n  img\n    border: 0\n\n  svg:not(:root)\n    overflow: hidden\n\n  figure\n    margin: 1em 40px\n\n  hr\n    -moz-box-sizing: content-box\n    box-sizing: content-box\n    height: 0\n\n  pre\n    overflow: auto\n\n  code, kbd, pre, samp\n    font-family: monospace, monospace\n    font-size: 1em\n\n  button, input, optgroup, select, textarea\n    color: inherit\n    font: inherit\n    margin: 0\n\n  button\n    overflow: visible\n\n  button, select\n    text-transform: none\n\n  button, html input[type=\"button\"], input[type=\"reset\"], input[type=\"submit\"]\n    -webkit-appearance: button\n    cursor: pointer\n\n  button[disabled], html input[disabled]\n    cursor: default\n\n  button::-moz-focus-inner, input::-moz-focus-inner\n    border: 0\n    padding: 0\n\n  input\n    line-height: normal\n\n  input[type=\"checkbox\"], input[type=\"radio\"]\n    box-sizing: border-box\n    padding: 0\n\n  input[type=\"number\"]::-webkit-inner-spin-button, input[type=\"number\"]::-webkit-outer-spin-button\n    height: auto\n\n  input[type=\"search\"]\n    -webkit-appearance: textfield\n    -moz-box-sizing: content-box\n    -webkit-box-sizing: content-box\n    box-sizing: content-box\n\n  input[type=\"search\"]::-webkit-search-cancel-button, input[type=\"search\"]::-webkit-search-decoration\n    -webkit-appearance: none\n\n  fieldset\n    border: 1px solid #c0c0c0\n    margin: 0 2px\n    padding: 0.35em 0.625em 0.75em\n\n  legend\n    border: 0\n    padding: 0\n\n  textarea\n    overflow: auto\n\n  optgroup\n    font-weight: bold\n\n  table\n    border-collapse: collapse\n    border-spacing: 0\n\n  td, th\n    padding: 0\n","/*\n * Vendor \"display: flex\" support with fallback to obsolete versions.\n */\n\nflex-version ?= box flex\n\n//\n// 1. Display values\n//    - http://www.w3.org/TR/css3-flexbox/#flex-containers\n//\ndisplay(type, args...)\n  if flex == type || inline-flex == type\n    if box in flex-version\n      if flex == type\n        display: -ms-flexbox args\n        display: vendor-value(box args, only: moz webkit)\n      else\n        display: -ms-inline-flexbox args\n        display: vendor-value(inline-box args, only: moz webkit)\n    if flex in flex-version\n      display: vendor-value(arguments, only: webkit official) // overwrites old webkit\n  else\n    display: arguments\n\n/*\n * New syntax for browsers like Google Chrome.\n * Plus a translation to the old syntax, if possible.\n */\n\n\n//\n// 5. Ordering and Orientation\n//    - http://www.w3.org/TR/css3-flexbox/#ordering-and-orientation\n//\n-flex-obsolete-direction(direction)\n  if box in flex-version\n    if row-reverse == direction || column-reverse == direction\n      vendor('box-direction', reverse, ignore: ms official)\n\n    if row == direction || row-reverse == direction\n      vendor('box-orient', horizontal, ignore: ms official)\n    else if column == direction || column-reverse == direction\n      vendor('box-orient', vertical, ignore: ms official)\n\n-flex-obsolete-wrap(value)\n  if box in flex-version\n    // WARN: wrap-reverse does not have a box equivalent. This will render in different manners\n    //    on box vs. flex values.\n    if 'wrap' == value || wrap-reverse == value\n      vendor('box-lines', multiple, ignore: ms official)\n    else if nowrap == value\n      vendor('box-lines', single, ignore: ms official)\n\nflex-direction(direction)\n  // obsolete\n  -flex-obsolete-direction(direction)\n\n  // new\n  if flex in flex-version\n    vendor('flex-direction', arguments, only: webkit ms official)\n\nflex-wrap(value)\n  // obsolete\n  -flex-obsolete-wrap(value)\n\n  if flex in flex-version\n    vendor('flex-wrap', arguments, only: webkit ms official)\n\nflex-flow()\n  // obsolete\n  -flex-obsolete-direction(arguments[0])\n  -flex-obsolete-direction(arguments[1])\n  -flex-obsolete-wrap(arguments[0])\n  -flex-obsolete-wrap(arguments[1])\n\n  // new\n  if flex in flex-version\n    vendor('flex-flow', arguments, only: webkit ms official)\n\n\norder()\n  // obsolete\n  if box in flex-version\n    vendor('box-ordinal-group', arguments, ignore: ms official)\n\n  // new\n  if flex in flex-version\n    vendor('flex-order', arguments, only: ms)\n    vendor('order', arguments, only: webkit official)\n\n\n//\n// 7. Flexibility\n//    - http://www.w3.org/TR/css3-flexbox/#flexibility\n//\nflex-grow(growth)\n  // obsolete\n  if box in flex-version\n    vendor('box-flex', growth)\n\n  // new\n  if flex in flex-version\n    vendor('flex-grow', arguments, only: webkit official)\n\nflex-basis()\n  if flex in flex-version\n    vendor('flex-basis', arguments, only: webkit official)\n\nflex-shrink()\n  if flex in flex-version\n    vendor('flex-shrink', arguments, only: webkit official)\n\nflex(growth)\n\n  // obsolete\n  if box in flex-version\n    shrink = 1\n\n    if none == growth || initial == growth\n      // Well known values\n      shrink = 0 if none == growth\n      growth = 0\n    else if is-width(growth) == true\n      // Basis is defined as the first parameter\n      growth = arguments[1] || 0\n      shrink = arguments[2] if 3 <= length(arguments)\n    else if arguments[1] && is-width(arguments[1]) == false\n      // Growth is first and shrink is second\n      shrink = arguments[1]\n\n    // Since we can't make the distinction between growing and shrinking in the box model, take\n    // the one that provides the most flexibility.\n    vendor('box-flex', max(growth, shrink), ignore: ms)\n\n  // new\n  if flex in flex-version\n    vendor('flex', arguments, only: webkit ms official)\n\n\n// converts the justification alignment\n-convert-justify(align)\n  if flex-start == align\n    return start\n  else if flex-end == align\n    return end\n  else if space-around == align\n    return distribute\n  else if space-between == align\n    return justify\n  else\n    return align\n\n//\n// 8. Alignment\n//    - http://www.w3.org/TR/css3-flexbox/#alignment\n//\njustify-content(align)\n  // obsolete\n  if box in flex-version\n    vendor('box-pack', -convert-justify(align), ignore: ms official)\n\n  // new\n  if flex in flex-version\n    vendor('flex-pack', -convert-justify(align), only: ms)\n    vendor('justify-content', align, only: webkit official)\n\nalign-content(align)\n  // WARN: Obsolete spec does not allow for adjustment here\n  if flex in flex-version\n    vendor('flex-line-pack', -convert-justify(align), only: ms)\n    vendor('align-content', align, only: webkit official)\n\n// converts alignment from 'flex' to normal value\n-convert-alignment(align)\n  if flex-start == align\n    return start\n  else if flex-end == align\n    return end\n  else\n    return align\n\nalign-items(align)\n  // obsolete\n  if box in flex-version\n    vendor('box-align', -convert-alignment(align), ignore: ms official)\n\n  // new\n  if flex in flex-version\n    vendor('flex-align', -convert-alignment(align), only: ms)\n    vendor('align-items', arguments, only: webkit official)\n\nalign-self(align)\n  // WARN: Obsolete spec does not allow for overriding alignment on individual items.\n  if flex in flex-version\n    vendor('align-self', align, only: webkit official)\n    vendor('flex-item-align', -convert-alignment(align), only: ms)\n","use('../nodes/vendor-helpers.js')\n@import 'config'\n\n/*\n * Alias \"nowrap\" as \"no-wrap\".\n */\n\nno-wrap = unquote('nowrap')\n\n/*\n * Helper to find out if a given value is a width\n */\n\nis-width(val)\n  if auto == val\n    return true\n  else if val && 'unit' == type(val)\n    // Stylus does not short circuit so we need to perform this as a distinct\n    // operation to prevent errors\n    return '' != unit(val)\n  return false\n\n/*\n * Vendor support for the given prop / arguments, optionally specifying the\n * only prefixes to utilize, or those which should be ignored.\n */\n\nvendor(prop, args, only = null, ignore = null, vendor-property = true)\n  need_normalize = !vendor-property or prop in ('transition' 'transition-property' 'border-image' 'border-image-slice')\n  for prefix in vendor-prefixes\n    unless (only and !(prefix in only)) or (ignore and prefix in ignore)\n      if official == prefix\n        if need_normalize\n          {prop}: normalize(prop,('%s' % args))\n        else\n          {prop}: args\n      else\n        newprop = prop\n        newprop = '-' + prefix + '-' + prop if vendor-property\n\n        if need_normalize\n          {newprop}: normalize(prop,('%s' % args),prefix)\n        else\n          {newprop}: args\n/*\n * Vendorize the given value.\n */\n\nvendor-value(arg, only = null, ignore = null)\n  prop = current-property[0]\n  for prefix in vendor-prefixes\n    unless (only and !(prefix in only)) or (ignore and prefix in ignore) or official == prefix\n      add-property(prop, '-%s-%s' % (prefix arg))\n  arg\n\n/*\n * Vendor \"box-shadow\" support.\n */\n\nbox-shadow()\n  vendor('box-shadow', arguments, only: webkit official)\n\n/*\n * Vendor \"user-select\" support.\n */\n\nuser-select()\n  vendor('user-select', arguments, only: webkit moz ms official)\n\n/*\n * Vendor \"column-count\" support.\n */\n\ncolumn-count()\n  vendor('column-count', arguments, only: webkit moz official)\n\n/*\n * Vendor \"column-gap\" support.\n */\n\ncolumn-gap()\n  vendor('column-gap', arguments, only: webkit moz official)\n\n/*\n * Vendor \"column-rule\" support.\n */\n\ncolumn-rule()\n  vendor('column-rule', arguments, only: webkit moz official)\n\n/*\n * Vendor \"column-rule-color\" support.\n */\n\ncolumn-rule-color()\n  vendor('column-rule-color', arguments, only: webkit moz official)\n\n/*\n * Vendor \"column-rule-width\" support.\n */\n\ncolumn-rule-width()\n  vendor('column-rule-width', arguments, only: webkit moz official)\n\n/*\n * Vendor \"column-rule-style\" support.\n */\n\ncolumn-rule-style()\n  vendor('column-rule-style', arguments, only: webkit moz official)\n\n/*\n * Vendor \"column-width\" support.\n */\n\ncolumn-width()\n  vendor('column-width', arguments, only: webkit moz official)\n\n/*\n * Vendor \"column-span\" support.\n */\n\ncolumn-span()\n  vendor('column-span', arguments, only: webkit official)\n\n/*\n * Vendor \"column-fill\" support.\n */\n\ncolumn-fill()\n  vendor('column-fill', arguments, only: moz)\n\n/*\n * Legacy syntax support for background-clip and background-origin\n */\n\nlegacy-bg-values(property, args)\n  legacy_args = ()\n  importance = unquote('')\n  for subargs in args\n    for arg in subargs\n      if arg in (border-box padding-box content-box)\n        arg = unquote('border')  if arg == border-box\n        arg = unquote('padding') if arg == padding-box\n        arg = unquote('content') if arg == content-box\n      if arg != '!important'\n        push(legacy_args,arg)\n      else\n        importance = !important\n  vendor(property, unquote(join(', ',legacy_args)) importance, only: moz webkit)\n\n/*\n * Vendor \"background-clip\" support.\n */\n\nbackground-clip()\n  if arguments[0] == text\n    vendor('background-clip', arguments, only: webkit)\n  else\n    legacy-bg-values('background-clip', arguments)\n    background-clip: arguments\n\n/*\n * Vendor \"background-origin\" support.\n */\n\nbackground-origin()\n  legacy-bg-values('background-origin', arguments)\n  background-origin: arguments\n\n/*\n * Vendor \"background-size\" support.\n */\n\nbackground-size()\n  vendor('background-size', arguments, only: webkit moz official)\n\n/*\n * Vendor \"transform\" support.\n */\n\ntransform()\n  vendor('transform', arguments)\n\n/*\n * Vendor \"transform-origin\" support.\n */\ntransform-origin()\n    vendor('transform-origin', arguments)\n\n/*\n * Vendor \"transform-style\" support.\n */\n\ntransform-style()\n  vendor('transform-style', arguments)\n\n/*\n * Vendor \"border-image\" support.\n */\n\nborder-image()\n  vendor('border-image', arguments, only: webkit moz o official)\n\n/*\n * Vendor \"transition\" support.\n */\n\ntransition()\n  vendor('transition', arguments)\n\n/*\n * Vendor \"transition-property\" support.\n */\n\ntransition-property()\n  vendor('transition-property', arguments)\n\n/*\n * Vendor \"transition-duration\" support.\n */\n\ntransition-duration()\n  vendor('transition-duration', arguments)\n\n/*\n * Vendor \"transition-timing-function\" support.\n */\n\ntransition-timing-function()\n  vendor('transition-timing-function', arguments)\n\n/*\n * Vendor \"transition-delay\" support.\n */\n\ntransition-delay()\n  vendor('transition-delay', arguments)\n\n/*\n * Vendor \"backface-visibility\" support.\n */\n\nbackface-visibility()\n  vendor('backface-visibility', arguments, only: webkit moz ms official)\n\n/*\n * Vendor \"perspective\" support.\n */\n\nperspective()\n  if mixin\n    vendor('perspective', arguments, only: webkit moz ms official)\n  else\n    'perspective(%s)' % arguments\n\n/*\n * Vendor \"perspective-origin\" support.\n */\n\nperspective-origin()\n  vendor('perspective-origin', arguments, only: webkit moz ms official)\n\n/*\n * Opacity with conditional IE support.\n */\n\nopacity(n, args...)\n  opacity: n args\n  if support-for-ie\n    if n == inherit or n == initial\n      -ms-filter: n args\n      filter: n args\n    else\n      val = round(n * 100)\n      if val == 100\n        -ms-filter: none args\n        filter: none args\n      else\n        -ms-filter: '\"progid:DXImageTransform.Microsoft.Alpha(Opacity=%s)\"' % val args\n        filter: 'alpha(opacity=%s)' % val args\n\n/*\n * Vendor \"text-size-adjust\"\n */\n\ntext-size-adjust()\n  vendor('text-size-adjust', arguments)\n\n/*\n * Alias the \"white-space\" property.\n */\n\nwhitespace()\n  white-space: arguments\n\n/*\n * Vendor \"box-sizing\" support.\n */\n\nbox-sizing()\n  vendor('box-sizing', arguments, only: webkit moz official)\n\n/*\n * Vendor \"box-orient\" support.\n */\n\nbox-orient()\n  vendor('box-orient', arguments, only: webkit moz official)\n\n/*\n * Vendor \"box-flex-group\" support.\n */\n\nbox-flex-group()\n  vendor('box-flex-group', arguments, only: webkit moz official)\n\n/*\n * Vendor \"box-ordinal-group\" support.\n */\n\nbox-ordinal-group()\n  vendor('box-ordinal-group', arguments, only: webkit moz ms official)\n\n\n/*\n * Vendor \"box-align\" support.\n */\n\nbox-align()\n  vendor('box-align', arguments, only: webkit moz ms official)\n\n/*\n * Vendor \"box-pack\" support.\n */\n\nbox-pack()\n  vendor('box-pack', arguments, only: webkit moz ms official)\n\n/*\n * Vendor \"box-direction\" support.\n */\n\nbox-direction()\n  vendor('box-direction', arguments, only: webkit moz ms official)\n\n/*\n * Vendor \"animation\" support.\n */\n\nanimation()\n  vendor('animation', arguments)\n\n\n/*\n * Vendor \"animation-name\" support.\n */\n\nanimation-name()\n  vendor('animation-name', arguments)\n\n/*\n * Vendor \"animation-duration\" support.\n */\n\nanimation-duration()\n  vendor('animation-duration', arguments)\n\n/*\n * Vendor \"animation-delay\" support.\n */\n\nanimation-delay()\n  vendor('animation-delay', arguments)\n\n/*\n * Vendor \"animation-direction\" support.\n */\n\nanimation-direction()\n  vendor('animation-direction', arguments)\n\n/*\n * Vendor \"animation-iteration-count\" support.\n */\n\nanimation-iteration-count()\n  vendor('animation-iteration-count', arguments)\n\n/*\n * Vendor \"animation-timing-function\" support.\n */\n\nanimation-timing-function()\n  vendor('animation-timing-function', arguments)\n\n/*\n * Vendor \"animation-play-state\" support.\n */\n\nanimation-play-state()\n  vendor('animation-play-state', arguments)\n\n/*\n * Vendor \"animation-fill-mode\" support.\n */\n\nanimation-fill-mode()\n  vendor('animation-fill-mode', arguments)\n\n/*\n * Vendor \"hyphens\" support.\n */\n\nhyphens()\n  vendor('hyphens', arguments, only: webkit moz ms official)\n\n/*\n * Vendor \"appearance\" support.\n */\n\nappearance()\n  vendor('appearance', arguments, only: webkit moz official)\n\n/*\n * Vendor \"tab-size\" support.\n */\n\ntab-size()\n  vendor('tab-size', arguments, only: moz o official)\n\n/*\n * Vendor \"overflow-scrolling\" support.\n */\n\noverflow-scrolling()\n  vendor('overflow-scrolling', arguments, only: webkit official)\n\n/*\n * Vendor \"text-overflow\" support, , -o- for opera 9.* - 10.*\n */\n\ntext-overflow()\n  vendor('text-overflow', arguments, only: official o)\n\n/*\n * Vendor \"text-size-adjust\" support.\n */\ntext-size-adjust()\n  vendor('text-size-adjust', arguments, only: official webkit ms)\n\n/*\n * Vendor \"font-smoothing\" support, webkit only.\n */\nfont-smoothing()\n  vendor('font-smoothing', arguments, only: webkit)\n\n/*\n * Helper for border-radius().\n */\n\n-apply-border-radius(pos, importance)\n  if length(pos) == 3\n    // border-radius: <top | buttom> <left | right> <n>\n    y = pos[0]\n    x = pos[1]\n    // We don't use moz for simple boder-radius anymore\n    // vendor('border-radius-%s%s' % pos, pos[2], only: moz)\n    vendor('border-%s-%s-radius' % pos, pos[2] importance, only: webkit official)\n  else if pos[0] in (top bottom)\n    // border-radius: <top | bottom> <n>\n    -apply-border-radius(pos[0] left pos[1], importance)\n    -apply-border-radius(pos[0] right pos[1], importance)\n  else if pos[0] in (left right)\n    // border-radius: <left | right> <n>\n    unshift(pos, top);\n    -apply-border-radius(pos, importance)\n    pos[0] = bottom\n    -apply-border-radius(pos, importance)\n\n/*\n * border-radius supporting vendor prefixes and\n * augmented behavior.\n *\n * Examples:\n *\n *    border-radius: 2px 5px\n *    border-radius: top 5px bottom 10px\n *    border-radius: left 5px\n *    border-radius: top left 5px\n *    border-radius: top left 10px bottom right 5px\n *    border-radius: top left 10px, bottom right 5px\n *\n */\n\nborder-radius()\n  pos = ()\n  augmented = false\n  importance = arguments[length(arguments) - 1] == !important ? !important : unquote('')\n\n  for args in arguments\n    for arg in args\n      if arg is a 'ident'\n        append(pos, arg)\n        augmented = true\n      else\n        append(pos, arg)\n        if augmented\n          -apply-border-radius(pos, importance)\n          pos = ()\n  vendor('border-radius', pos, only: webkit official) unless augmented\n\n/**\n * Vendor input-placeholder/placeholder support.\n *\n * Examples:\n *    // Default syntax\n *    body\n *      placeholder(color #333, font-weight normal)\n *\n *    // The comma is important\n *    .placeholder-red\n *      placeholder(color red,)\n *\n *    // We can pass a function\n *    green-placeholder()\n *      color green\n *    .placeholder-green\n *      placeholder(green-placeholder)\n *\n *    // We can pass a hash\n *    textarea\n *      placeholder((font-style italic) (font-weight bold) (padding '4px 10px'))\n */\nplaceholder()\n  for v in ':-webkit-input' '-moz' ':-moz' '-ms-input'\n    &:{v}-placeholder\n      for pair in arguments\n        if typeof(pair) == 'function'\n          pair()\n        else if pair is not null && pair[0] is not null\n          {pair[0]}: type(pair[1]) == 'string' ? s(pair[1]) : pair[1]\ninput-placeholder = placeholder\n\n/*\n * Vendor background support (gradients).\n */\n\nbackground()\n  if match('-gradient\\(', ''+arguments)\n    vendor('background', arguments, vendor-property: false)\n  else\n    background arguments\n\nbackground-image()\n  if match('-gradient\\(', ''+arguments)\n    vendor('background-image', arguments, vendor-property: false)\n  else\n    background-image arguments\n\ncursor()\n  if match('-gradient\\(', ''+arguments)\n    vendor('cursor', arguments, vendor-property: false)\n  else\n    cursor arguments\n\nlist-style()\n  if match('-gradient\\(', ''+arguments)\n    vendor('list-style', arguments, vendor-property: false)\n  else\n    list-style arguments\n\nlist-style-image()\n  if match('-gradient\\(', ''+arguments)\n    vendor('list-style-image', arguments, vendor-property: false)\n  else\n    list-style-image arguments\n","/*\n * border: <color>\n * border: ...\n */\n\nborder(color, args...)\n  if color is a 'color'\n    border: 1px solid color args\n  else\n    border: arguments\n","/*\n * Overflow utility. Maps to regular overflow, and adds an ellipsis value.\n *\n * Synopsis:\n *\n *   overflow: <type>\n *\n * Examples:\n *\n *     overflow: auto\n *     overflow: hidden\n *     overflow: ellipsis\n *\n */\n\noverflow()\n  if arguments[0] == ellipsis\n    ellipsis()\n  else\n    overflow: arguments\n","// ----------\n// Typography\n// ----------\n\n// Function: Line Height\n// \n// If there is a font-size set on the parent element, adjusts the line height to \n// match that. If not, it uses the base font-size to calculate the line-height.\n\n-line-height()\n  if @font-size\n    line-height: 1.6em\n  else\n    line-height: unit(font-size*1.6, 'px')\n    line-height: 1.6rem\n\n// Mixin: Text Margin\n// \n// Puts nice visually pleasing top and bottom margins on a paragraph of text.\n// Put a font-size on your element to have it adjust accordingly.\n// \n// ex. p\n//       font-size: 18px\n//       text-margin()\n\ntext-margin(size=font-size)\n  if @font-size\n    margin: .75em 0\n  else\n    margin: unit(font-size*.75, 'px') 0\n\n// Mixin: Paragraph\n// \n// Sets a nice size, line-height, and margins on a paragraph of text. Pass a\n// size in to customize. Toggle margins off if you don't want them.\n// \n// ex. p()\n// ex. p: 18px\n// ex. p: 14px false\n\np(size=1rem, margins = true)\n  font-size: size\n  text-margin() if margins\n  -line-height()\n  openTypeLigatures() if ligatures\n\n// Alias: paragraph\nparagraph = p\n\n// Alias: Font Size\n// An alias for 'font-size' with auto-fallback for rem.\n// ex. fs: 16px\n// ex. fs: 1.2rem\n\nfs(size)\n  if (unit(size) == 'rem')\n    font-size: round(unit((font-size*size), 'px'))\n    font-size: size\n  else\n    font-size: size\n\n// Alias: Uppercase\n// An alias for 'text-transform: uppercase'\n// ex. uppercase()\n\nuppercase()\n  text-transform: uppercase\n\n// Alias: Upcase\nupcase = uppercase\n\n// Alias: Lowercase\n// An alias for 'text-transform: lowercase'\n// ex. lowercase()\n\nlowercase()\n  text-transform: lowercase\n\n// Alias: Downcase\ndowncase = lowercase\n\n// Alias: Reset Case\n// Gets rid of an text transform\n// ex. reset-case()\n\nreset-case()\n  text-transform: none\n\n// Mixin: Small\n// \n// Makes your text smaller and a little lighter. Great on <small /> tags.\n// \n// ex. small()\n\nsmall()\n  font-size: 55%\n  opacity: .6\n  font-weight: normal\n\n// Function: Heading\n// For internal use within headings\n\n-heading(multiplier)\n  font-size: unit((font-size*multiplier), 'px')\n  font-size: unit(multiplier, 'rem')\n  text-rendering: optimizelegibility\n  font-weight: bold\n  text-margin()\n  -line-height()\n  openTypeLigatures() if ligatures\n\n// Mixin Set: h1, h2, h3, h4, h5, h6\n// \n// These provide nice defaults for headings based off the default font size.\n// The can scale infinitely, and work best when matched to their corresponding\n// html elements. If you'd like to change the base size of a header, just pass\n// it as an option.\n// \n// ex. h3()\n// ex. h3: 3.5\n\nh1(size=2.4)\n  -heading(size)\n\nh2(size=1.8)\n  -heading(size)\n\nh3(size=1.5)\n  -heading(size)\n\nh4(size=1.3)\n  -heading(size)\n\nh5(size=1.0)\n  -heading(size)\n\nh6(size=0.9)\n  -heading(size)\n  upcase()\n\n// Mixin: Link\n// \n// A nice default style for links. Accepts a color and a style. Color can be\n// anything, style can be underline, darken, lighten, or glow, each giving it a\n// different style of interaction when hovered. More suggestions here welcome.\n// \n// ex. link()\n// ex. link: green\n// ex. link: #57777E 'glow'\n\nlink(color=blue, style='underline')\n  color: color\n  text-decoration: none\n  transition()\n\n  if style == 'underline'\n    hover-underline()\n    &:hover\n      color: darken(@color, 15%)\n  else if style == 'darken'\n    &:hover\n      color: darken(@color, 20%)\n  else if style == 'lighten'\n    hover-lighten()\n  else if style == 'glow'\n    &:hover\n      text-shadow: 0 0 7px rgba(color, .6)\n      \n  &:visited\n    opacity: .8\n\n// Mixin: Reset Link\n// \n// Sometimes my link mixin of the browser defaults will give you questionable\n// link defaults that you don't want on certain elements. This guy gets rid of\n// that.\n\n// ex. reset-link()\n\nreset-link()\n  border: none\n  text-decoration: none\n  color: initial\n  \n  &:hover\n    border: none\n    text-decoration: none\n    color: initial\n    \n  &:visited\n    opacity: 1\n\n// Mixin: Text Selection\n// \n// This guy sets the text select color intelligently based on the\n// highlight-color variable found in the settings file. If you really want, you\n// can pass it a color override too.\n\n// ex. text-selection()\n\ntext-selection(color=highlight-color, textColor=null)\n  textColor = (light(color) ? white : #494949) unless textColor\n\n  &::-moz-selection\n    background: color\n    color: textColor\n    \n  &::selection\n    background: color\n    color: textColor\n\n// Mixin: Ul\n// \n// A nice default for list styles. More or less the same as browser defaults,\n// scales nicely. You can pass it any style that list-style-type would normally\n// take. Defaults to disc. Use this on a ul element por favor.\n// \n// ex. ul()\n// ex. ul: 'square'\n\nul(style='disc')\n  margin: 5px 15px\n  margin: 0.32rem 0.94rem\n  padding-left: 1rem\n\n  li\n    list-style-type: unquote(style)\n    padding: 2px 0\n    padding: 0.125rem\n\n// Mixin: Ol\n// \n// A nice default for list styles. More or less the same as browser defaults,\n// scales nicely. You can pass it any style that list-style-type would normally\n// take. Defaults to decimal. Use this on a ol element por favor.\n// \n// ex. ol()\n// ex. ol: 'upper-roman'\n\nol(style='decimal')\n  margin: 5px 18px\n  margin: 0.32rem 1.125rem\n  padding-left: 1rem\n\n  li\n    list-style-type: unquote(style)\n    padding: 2px 0\n    padding: 0.125rem\n\n// Mixin: Inline List\n// \n// For when you need your list to be horizontal. Pass it the spacing you want\n// between list elements, whatever units you'd like. Defaults to 20px.\n// \n// ex. inline-list()\n// ex. inline-list: 15px\n\ninline-list(spacing=20px)\n  group()\n  margin: 0\n  padding: 0\n\n  li\n    float: left\n    margin-right: spacing\n    list-style-type: none\n\n  li:last-child\n    margin-right: 0\n\n// Mixin: Reset List\n// \n// If you're tired of all the list shenanigans and want to get rid of them for\n// this special list you're working on, this is your guy. Resets the margins,\n// padding, and style.\n// \n// ex. reset-list()\n\nreset-list()\n  margin: 0\n  padding: 0\n\n  li\n    float: none\n    list-style-type: none\n    padding: 0\n    margin: 0\n\n// Mixin: Blockquote\n// \n// Nice styles for a blockquote, and even puts a nice hyphen in before your\n// citation. Use with a <p> and <cite>, <footer>, or <figcaption> inside for\n// best results. Pass a color or 'none' to set the left border.\n// \n// ex. blockquote()\n\nblockquote(color=blue)\n  border-left: 4px solid color\n  margin: 1em 0\n  padding-left: 1.5em\n  group()\n\n  > p\n    font-weight: 300\n    font-size: 127%\n    font-size: 1.27rem\n    line-height: 127%\n    line-height: 1.27rem\n    margin-top: 0\n\n  > cite, > footer, > figcaption\n    color: #888888\n    &:before\n      content: '\\2014'\n\n// Alias: blockquo\nblockquo = blockquote\n\n// Hyphenation\n// \n// Hyphenation is the better word-break. It’s locale aware, and inserts the\n// hyphen character at the correct place, when breaking the words. This is\n// especially important in responsive designs. It will save you from a lot of\n// ragged lines. And, no need anymore for clunky & slow Javascript hyphenation\n// fallbacks. Taken from http://www.newnet-soft.com/blog/csstypography\n// \n// ex. hyphenation()\n\nhyphenation()\n    -ms-word-break: break-all\n    word-break:     break-all\n    word-break:     break-word // webkit\n    hyphens: auto // none, auto, <number>\n    -webkit-hyphenate-before: 2\n    -webkit-hyphenate-after:  3\n    hyphenate-lines:          3\n\n// Additive Mixin: Base\n// \n// WARNING: Creates classes in your css and styles them - not to be used inside\n// an element.\n// \n// This is an essential mixin. You want this on your page. Sets your font stack,\n// size, and colors based on the settings file and makes sure that your text is\n// a great looking as possible. You can override any of the params, but there is\n// really no reason to.\n// \n// ex. base()\n\nbase(fonts=font-stack, size=font-size, color=font-color)\n  html\n    font-size: unit(size, 'px')\n    font-size: unit((size/16)*100, \"%\")\n\n  body\n    font-family: fonts\n    color: color\n    -webkit-font-smoothing: antialiased\n    -webkit-text-size-adjust: 100%\n    -ms-text-size-adjust: 100%\n    font-size-adjust: auto\n\n// Additive Mixin: Headers\n// \n// WARNING: Creates classes in your css and styles them - not to be used inside\n// an element.\n// \n// Adds roots' wonderful scaling header styles to your <hx> tags.\n// \n// ex. headers()\n\nheaders()\n  h1\n    h1()\n\n  h2\n    h2()\n\n  h3\n    h3()\n\n  h4\n    h4()\n\n  h5\n    h5()\n\n  h6\n    h6()\n\n// Additive Mixin: Lists\n// \n// WARNING: Creates classes in your css and styles them - not to be used inside\n// an element.\n// \n// Adds roots' styles to ul and ols.\n// \n// ex. lists()\n\nlists()\n  ul\n    ul()\n  ol\n    ol()\n\n// Additive Mixin: Bold-Italic\n// \n// WARNING: Creates classes in your css and styles them - not to be used inside\n// an element.\n// \n// Adds bold and italic styles to the right tags if you did a global reset.\n// \n// ex. bold-italic()\n\nbold-italic()\n  b\n    bold()\n  i\n    italic()\n  strong\n    bold()\n  em\n    italic()\n\n// Additive Mixin: Typography\n// \n// WARNING: Creates classes in your css and styles them - not to be used inside\n// an element.\n// \n// Adds roots' styles to bold and italic elements, headers, paragrapgs, small\n// text, links, lists, and blockquotes. Got all your basic elements covered.\n// \n// ex. typography()\n\ntypography()\n  bold-italic()\n  headers()\n  lists()\n  text-selection()\n\n  p\n    paragraph()\n\n  small\n    small()\n\n  a\n    link()\n\n  blockquote\n    blockquo()\n  \n  .hyphenation\n    hyphenation()\n","@import '_settings'\n\nnormalize-css()\nbase()\n\nhtml, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n  outline: none;\n  -webkit-font-smoothing: antialiased;\n  -webkit-text-size-adjust: 100%;\n  -ms-text-size-adjust: 100%;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\nhtml { overflow-y: scroll; }\nbody {\n  background: #fafafa url('/img/diamond-plate.jpg'); /* http://subtlepatterns.com/subtle-grey/ */\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 62.5%;\n  line-height: 1;\n  color: #616161;\n  padding: 35px 0;\n}\n\nbr { display: block; line-height: 1.6em; }\n\narticle, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section { display: block; }\nol, ul { list-style: none; }\n\ninput, textarea {\n  -webkit-font-smoothing: antialiased;\n  -webkit-text-size-adjust: 100%;\n  -ms-text-size-adjust: 100%;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  outline: none;\n}\n\nblockquote, q { quotes: none; }\nblockquote:before, blockquote:after, q:before, q:after { content: ''; content: none; }\nstrong, b { font-weight: bold; }\n\ntable { border-collapse: collapse; border-spacing: 0; }\nimg { border: 0; max-width: 100%; }\n\nh1 {\n  font-family: 'Oldenburg', Arial, sans-serif;\n  color: #646464;\n  font-size: 4.0em;\n  line-height: 1.6em;\n  margin-bottom: 10px;\n}\n\nh2 {\n  font-size: 2.8em;\n  line-height: 1.55em;\n  margin-bottom: 4px;\n  color: #888;\n}\n\np {\n  font-size: 1.4em;\n  line-height: 1.55em;\n  margin-bottom: 12px;\n}\n\na {\n  color: #8eadd2;\n  text-decoration: none;\n}\na:hover {\n  color: #6e91b9;\n}\n\n\n/* page structure */\n#w {\n  display: block;\n  width: 800px;\n  margin: 0 auto;\n  background: #fff;\n  padding: 15px 25px;\n  -webkit-box-shadow: 1px 2px 3px -1px rgba(0,0,0,0.4);\n  -moz-box-shadow: 1px 2px 3px -1px rgba(0,0,0,0.4);\n  box-shadow: 1px 2px 3px -1px rgba(0,0,0,0.4);\n  -webkit-border-radius: 4px;\n  -moz-border-radius: 4px;\n  border-radius: 4px;\n}\n\n#ghapidata {\n  display: block;\n  padding: 25px 0;\n}\n\n#loader {\n  display: block;\n  width: 200px;\n  height: 200px;\n  margin: 0 auto;\n}\n\n\n/* page content styles */\n.smallname {\n  font-size: 0.75em;\n  color: #a9a9a9;\n  font-style: italic;\n}\n\n.avi {\n  float: left;\n  margin-right: 7px;\n  margin-bottom: 7px;\n}\n.avi img {\n  border: 1px solid #ccc;\n  padding: 3px;\n}\n\n.nav\n  nav()\n.repolist {\n  display: inline;\n  clear: both;\n  width: 100%;\n}\n.repolist ul {\n  font-size: 1.2em;\n  list-style-type: none !important;\n}\n.repolist ul li {\n  display: inline;\n}\n.repolist ul li a {\n  font-weight: bold;\n  padding: 6px 9px;\n  display: block;\n  float: left;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  text-decoration: none;\n  border: 1px solid #356492;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n  color: #fff;\n  background-color: #3673af;\n  background-image: -webkit-gradient(linear, left top, left bottom, from(#5597d8), to(#3673af));\n  background-image: -webkit-linear-gradient(top, #5597d8, #3673af);\n  background-image: -moz-linear-gradient(top, #5597d8, #3673af);\n  background-image: -ms-linear-gradient(top, #5597d8, #3673af);\n  background-image: -o-linear-gradient(top, #5597d8, #3673af);\n  background-image: linear-gradient(top, #5597d8, #3673af);\n}\n.repolist ul li a:hover {\n  background-color: #396895;\n  background-image: -webkit-gradient(linear, left top, left bottom, from(#4b87c2), to(#396895));\n  background-image: -webkit-linear-gradient(top, #4b87c2, #396895);\n  background-image: -moz-linear-gradient(top, #4b87c2, #396895);\n  background-image: -ms-linear-gradient(top, #4b87c2, #396895);\n  background-image: -o-linear-gradient(top, #4b87c2, #396895);\n  background-image: linear-gradient(top, #4b87c2, #396895);\n}\n.repolist ul li a:active {\n  -webkit-box-shadow: inset 0 3px 5px rgba(0,0,0,0.25);\n  -moz-box-shadow: inset 0 3px 5px rgba(0,0,0,0.25);\n  box-shadow: inset 0 3px 5px rgba(0,0,0,0.25);\n}\n\n.repolist ul li a span {\n  font-family: \"Courier New\", Courier, \"Lucida Typewriter\", monospace;\n  font-size: 0.9em;\n}\n\n.selector\n  glossy-button(silver)\n\n.li-button\n  list-style-type none !important\n  display inline !important\n  margin 15px !important\n\n\n/* input field */\n#ghusername {\n  display: block;\n  padding: 5px 8px;\n  font-size: 1.4em;\n  color: #666;\n  width: 550px;\n  margin-bottom: 15px;\n}\n\n#ghsubmitbtn {\n  display: inline-block;\n  padding: 8px 18px;\n  font-size: 14px;\n  font-weight: bold;\n  color: #444;\n  text-decoration: none;\n  text-shadow: 0 1px 0 rgba(255,255,255,0.8);\n  background-color: #eaeaea;\n  background-image: -webkit-linear-gradient(#fafafa, #eaeaea);\n  background-image: -moz-linear-gradient(#fafafa, #eaeaea);\n  background-image: -ms-linear-gradient(top, #fafafa, #eaeaea);\n  background-image: -o-linear-gradient(top, #fafafa, #eaeaea);\n  background-image: linear-gradient(#fafafa, #eaeaea);\n  border-radius: 3px;\n  border: 1px solid #ddd;\n  border-bottom-color: #c5c5c5;\n  -webkit-box-shadow: 0 1px 3px rgba(0,0,0,0.05);\n  -moz-box-shadow: 0 1px 3px rgba(0,0,0,0.05);\n  box-shadow: 0 1px 3px rgba(0,0,0,0.05);\n}\n#ghsubmitbtn:hover {\n  background-color: #dadada;\n  background-image: -webkit-linear-gradient(#eaeaea, #dadada);\n  background-image: -moz-linear-gradient(#eaeaea, #dadada);\n  background-image: -ms-linear-gradient(top, #eaeaea, #dadada);\n  background-image: -o-linear-gradient(top, #eaeaea, #dadada);\n  background-image: linear-gradient(#eaeaea, #dadada);\n  border-color: #ccc #ccc #b5b5b5;\n}\n#ghsubmitbtn:active {\n  background-color:#dadada;\n  background-image: none;\n  border-color: #b5b5b5;\n  -webkit-box-shadow: inset 0 3px 5px rgba(0,0,0,0.25);\n  -moz-box-shadow: inset 0 3px 5px rgba(0,0,0,0.25);\n  box-shadow: inset 0 3px 5px rgba(0,0,0,0.25);\n}\n\n/* clearfix */\n.clearfix:after { content: \".\"; display: block; clear: both; visibility: hidden; line-height: 0; height: 0; }\n.clearfix { display: inline-block; }\n\nhtml[xmlns] .clearfix { display: block; }\n* html .clearfix { height: 1%; }\n","// --\n// UI\n// --\n\n// Mixin: Area\n// \n// Just a nice little area for you to put content in. Rounded corners, box with\n// light grey background by default. You can pass it a different color if you'd\n// like.\n// \n// ex. area()\n// ex. area: red // <-- not recommended\n\narea(color=#F5F5F5)\n  box-shadow(inset 0 0 6px rgba(#000,.05))\n  background-color: color\n  padding: 15px\n  border-radius: 4px\n  margin: 20px 0\n  pie()\n\n// Mixin: Notice\n// \n// A notice for you. Best used for flash alerts, this was originally an internal\n// mixin, but you can use it if you'd like. Give it a color and a width and it\n// will output a nice lightly gradiented box for your notice to reside in.\n// \n// ex. notice()\n// ex. notice: 500px blue\n\nnotice(width=false, color=#EEEEEE, padding=10px)\n  group()\n  gradient: color 3%\n  border-radius: 5px\n  padding: padding\n  border: 1px solid darken(color, 10%)\n  box-shadow: 1px 1px 3px rgba(#000,.05)\n  position: relative\n  width: width if width\n\n// Mixin: Flash\n// \n// This is really great for rails flash messages, or really any little\n// notifications like 'logged in!', 'logged out!', or 'errarrrr!'. Takes one of\n// four types and colors them nicely for you - notice, success, warning, or\n// error. Defaults to notice.\n// \n// ex. flash()\n// ex. flash: 'error'\n\nflash(type='notice')\n  if type == 'notice'\n    notice(color: #6CC5FA)\n    color: #fff\n    font-weight: bold\n    text-shadow: 1px 1px 1px rgba(#000,.2)\n  if type == 'success'\n    notice(color: #7BDEA3)\n    color: #fff\n    font-weight: bold\n    text-shadow: 1px 1px 1px rgba(#000,.2)\n  if type == 'warning'\n    notice(color: #FAE677)\n    font-weight: bold\n    text-shadow: 1px 1px 1px rgba(#fff,.2)\n  if type == 'error'\n    notice(color: #E77C70)\n    color: #fff\n    font-weight: bold\n    text-shadow: 1px 1px 1px rgba(#000,.2)\n\n// Mixin: Breadcrumb\n// \n// Lay this one down on a list and it will turn the list into a breadcrumb-y\n// thing. By default separates with a slash, but you can feed it any character.\n// Second param is spacing between the list items, and the third is the color of\n// the divider. All are optional.\n// \n// ex. breadcrumb()\n// ex. breadcrumb: '>'\n// ex. breadcrumb: \"-\" 25px red\n// ex. breadcrumb \"~\" 40px\n\nbreadcrumb(character=\"/\", spacing=10px, dividerColor=#CDCDCD)\n  inline-list: spacing\n\n  li:after\n    content: character\n    margin-left: spacing\n    color: dividerColor\n\n  li:last-child:after\n    content: \"\"\n\n// Mixin: Bubble\n// \n// If you're anything like me, you always seem to find your designers putting\n// little bubbles in things. This mixin takes care of that problem, and makes a\n// nice bubble with 100% css. All parameters optional - accepts width, pointer\n// position (left, center, or right), and a color.\n// \n// ex. bubble()\n// ex. bubble: top center #57777E\n// ex. bubble: bottom right #5740A1 500px\n// ex. bubble: right top #5740A1 500px\n\nbubble(pos0=left, pos1=false, color=#EEEEEE, width=false, triangleSize=10px, sideDistance=15px, padding=10px, pointer=false, triangleColor=darken(color, 3%))\n\n  // use named argument 'pointer' as pos0 arg (to preserve old bubble api)\n  if pointer\n    pos1 = pointer\n    pos0 = bottom\n  // if no pos1 is given, shift args and assume 'bottom pos0'\n  if pos1 is false\n    pos1 = pos0\n    pos0 = bottom\n  else if pos1 is a 'color'\n    width = color\n    color = pos1\n    pos1 = pos0\n    pos0 = bottom\n\n  notice: width color padding\n\n  &:after\n    if pos0 is top\n      directionTriangle = 'up'\n      positionY = top\n      distanceY = -(triangleSize)\n    else if pos0 is bottom\n      directionTriangle = 'down'\n      positionY = bottom\n      distanceY = -(triangleSize)\n    else if pos0 is left\n      directionTriangle = 'left'\n      positionX = left\n      distanceX = -(triangleSize)\n    else if pos0 is right\n      directionTriangle = 'right'\n      positionX = right\n      distanceX = -(triangleSize)\n\n    if pos1 is left\n      positionX = left\n      distanceX = sideDistance\n    else if pos1 is right\n      positionX = right\n      distanceX = sideDistance\n    else if pos1 is bottom\n      positionY = bottom\n      distanceY = sideDistance\n    else if pos1 is top\n      positionY = top\n      distanceY = sideDistance\n    else if pos1 is center\n      if pos0 is top or pos0 is bottom or pos1 is false\n        margin-left: -(triangleSize)\n        positionX = left\n        distanceX = 50%\n      else\n        margin-top: -(triangleSize/2)\n        positionY = top\n        distanceY = 50%\n\n    triangle: directionTriangle triangleSize triangleColor\n    absolute: positionY distanceY positionX distanceX\n    display: block\n\n// Mixin: Figure\n// \n// For when you want to *semantically* show an image. Put this on your\n// <figure /> element and it will style the nested image and figcaption in a\n// wonderfully pleasing manner. Takes a color (for the thin outline), and if\n// you want, dimensions of the image as a space separated list.\n// \n// ex. figure()\n// ex. figure: blue\n// ex. figure(green, 100px 400px)\n\nfigure(color = default-color, dimensions = false)\n\n  if length(dimensions) > 1\n    display: block\n    size: dimensions[0] dimensions[1]\n  else if dimensions == false\n    inline-block()\n  else\n    warn(\"Make sure you pass the image's dimensions as a space-separated list\")\n\n  img\n    display: block\n    padding: 4px\n    border-radius: 3px\n    border: 1px solid rgba(color, .6)\n\n  figcaption\n    padding: 10px 0\n    text-align: center\n    italic()\n\n// Mixin: Navigation\n// \n// Makes a fantastic nav bar for you that doesn't look exactly like bootstrap's\n// and you can customize it as well. Params: fixed (boolean), color (recommend\n// something dark), link color, and size, which is an integer from one up, and\n// scales every aspect of the nav bar for you. All have defaults. This mixin is\n// meant to be placed on a <nav> element that contains a ul.\n// \n// ex. nav()\n// ex. nav: 1 #444 red true\n\nnavigation(size = 1, bgColor = #222, linkColor = #fff, posFixed = false)\n  group()\n  display: block\n  z-index: 10\n  gradient: bgColor 5%\n  box-shadow: 0 3px 3px rgba(0,0,0,.15)\n  border-bottom: 1px solid rgba(darken(bgColor, 15%),.7)\n  height: (size + 14) * 2.866px\n  width: 100%\n  font-size: unit(size + 14, 'px')\n\n  if posFixed\n    position: fixed\n  else\n    position: relative\n\n  h1\n    float: left\n    padding: (size + 14) * .58px\n    padding-left: 17px\n    color: linkColor\n    bold()\n    font-size: (size + 14) * 1.3px\n\n  ul\n    float: right\n    margin: 0\n    padding: (size + 14) * .8px\n    color: linkColor\n\n    li\n      list-style-type: none\n      margin-right: 30px\n      float: left\n\n      a\n        color: linkColor\n        border: none\n        cursor: pointer\n\n        &:hover\n          color: darken(linkColor, 20%)\n          border: none\n\n// Alias: nav\nnav = navigation\n\n// Additive Mixin: Flash Notices\n// \n// WARNING: Creates classes in your css and styles them - not to be used inside\n// an element.\n// \n// Super convenient flash notices. Anything with .flash on it will display as a\n// notice, and if you add the additional class .error, .warning, .notice, or\n// .success, it will display the appropriate color background for the message.\n// \n// ex. flash-notices()\n\nflash-notices()\n  .flash\n    &.error\n      flash(error)\n    &.warning\n      flash(warning)\n    &.notice\n      flash(notice)\n    &.success\n      flash(success)\n","// ------\n// Vendor\n// ------\n\n// Utilities specifically intended for helping with vendor-prefixed\n// css properties\n\n// Alias: Transition\n// \n// Transition with an intelligent default.\n// \n// ex. transition()\n// ex. transition: color 1s ease\n// ex. transition(color 1s ease, background 2.4s linear)\n\ntransition()\n  arguments = unquote('all .3s ease') unless arguments\n  transition: arguments\n\n\n// Alias: Box Shadow\n// \n// Box shadow with pie support, if you are using it.\n// \n// ex. box-shadow: 1px 1px 3px blue\n// ex. box-shadow(1px 1px 3px blue, inset 2px 0 5px rgba(0,0,0,.5))\n\nbox-shadow()\n  box-shadow: arguments\n  pie()\n\n// Alias: Border Radius\n// \n// Border-radius with pie support, if you are using it.\n// \n// ex. +round-corners(5px)\n\nborder-radius()\n  border-radius: arguments\n  pie()\n\n// Alias: Opacity\n// \n// I know, it seems silly. But every time you go to old IE testing you will be\n// thanking yourself for using this instead of the normal opacity declaration.\n// Overrides default opacity.\n// \n// ex. opacity: .6\n\nopacity(opacity)\n  filter: s(\"progid:DXImageTransform.Microsoft.Alpha(Opacity=%s)\", opacity * 100) if support-for-ie\n  opacity: opacity\n\n// Alias: Border Box\n// A quicker way to specify border-box sizing.\n\nborder-box()\n  box-sizing: border-box\n\n// Alises: background-appearance-x and y\n// \n// In case you want to use an unsupported background-position property, this\n// should set you straight!\n\nbackground-position-x(x)\n  background-position: x 0\n\nbackground-position-y(y)\n  background-position: 0 y\n\n// Mixin: Opentype ligatures\n// \n// The vast majority of fonts contain lowercase and uppercase alphabets,\n// numerals, punctuation and accents. // Many professionally-designed fonts\n// also contain ligatures, alternative characters, smallcaps, different kinds of\n// numbers, and sometimes much more besides. This enables it.\n// \n// Source: http://www.newnet-soft.com/blog/csstypography\n// Additional: http://blog.fontdeck.com/post/15777165734/opentype-1\n\nopenTypeLigatures()\n  -moz-font-feature-settings:    \"liga=1, dlig=1\"\n  -ms-font-feature-settings:     \"liga\", \"dlig\"\n  -webkit-font-feature-settings: \"liga\", \"dlig\"\n  -o-font-feature-settings:      \"liga\", \"dlig\"\n  font-feature-settings:         \"liga\", \"dlig\"\n","/*\n * The Magnificent Micro Clearfix\n *\n * Useful for clearing floats without structural markup.\n * Prevents margin-collapsing on child elements in most cases.\n *\n * Known issues:\n *\n * 1. For IE 6/7 when applied to an element that contains only left-floated\n *    children the bottom margin on child elements will be collapsed.\n *\n * 2. For Firefox versions prior to 3.5 when applied to the first child element\n *    of body, and the element does not have non-zero padding, extra space will\n *    appear between the body and the first child.\n *\n * See http://nicolasgallagher.com/micro-clearfix-hack/\n * and http://j.mp/bestclearfix\n *\n */\n\nclearfix()\n  &:before\n  &:after\n    content: \"\"\n    display: table\n  &:after\n    clear: both\n  zoom: 1 if support-for-ie\n","// ---------\n// Utilities\n// ---------\n\n// Mixin: Pie\n// When turned on, enables css3 pie (http://css3pie.com/) for all\n// elements that can use it. Which makes IE look a lot nicer.\n\npie()\n  behavior: url(pie-path) if pie-enabled\n\n// Mixin: Rounded\n// \n// Unless you are working with a ridiculously large element, this will round the\n// corners as much as css will allow. Even in IE.\n// \n// ex. rounded()\n\nrounded()\n  border-radius: 999px\n  pie()\n\n// Alias: No Select\n// You can't highlight this.\n\nno-select()\n  -webkit-touch-callout: none\n  user-select: none\n\n// Alias: B\n// Border, but quicker and with an intelligent default.\n\nb()\n  arguments = unquote('1px solid') unless arguments\n  border: arguments\n\n// Mixin: Bg\n// \n// Makes background (with image) declarations a little simpler. Use this with\n// the global img-path variable to set a base image path that you don't have to\n// keep repeating. Also sets 'no-repeat' as the default background-repeat.\n// \n// ex. bg: 'test.png'\n// ex. bg: 'other.jpg' center center repeat\n\nbg(path, args...)\n  args = unquote('no-repeat') unless args\n  background: url(img-path path) args\n\n// Mixin: bg-retina\n// \n// Make sure the image path is double the size, pass it halved numbers, and\n// you're in the retina-clear.\n// \n// ex. bg-retina: 'test.png' 200px 100px\n// ex. bg-retina: 'other.jpg' 100px 50px center center repeat\n\nbg-retina(path, width, height, args...)\n  args = unquote('no-repeat') unless args\n  set_size = false\n  \n  for arg in args\n    if arg == 'no-repeat'\n      set_size = true\n\n  background: url(img-path path) args\n  background-size: width height\n  \n  if set_size\n    size: width height\n\n// Alias: Bold\n// It's just faster to type bold() than font-weight: bold\n\nbold()\n  font-weight: bold\n\n// Alias: Italic\n// It's just faster to type italic() than font-style: italic\n\nitalic()\n  font-style: italic\n\n// Alias: Normal\n// Put the font-weight and style back to normal\n\nnormal()\n  font-weight: normal\n  font-style: normal\n\n// Mixin: Image Replace\n// \n// Image replacement. Pass it an image path and the image's dimensions and any\n// text will be hidden in the div and it will show an image instead. Uses the\n// fanciest new method, props to Paul Irish. Only works when called as a\n// function with parens. Do not try to do it with a colon!\n// \n// ex. ir('test.jpg', 200 400)\n\nimage-replace(path, dimensions...)\n  dimensions = dimensions[0]\n  font: 0/0 a\n  text-shadow: none\n  color: transparent\n  bg: path if path\n  if length(dimensions) > 1\n    width: unit(dimensions[0], 'px')\n    height: unit(dimensions[1], 'px')\n  else\n    warn(\"Make sure you also pass the image dimensions. Example: ir('/img/whatever.jpg', 200px 400px)\")\n\n// Alias: ir\nir = image-replace\n\n// Mixin: Columns\n// \n// For css3 columns. Takes column count (int), column gap (px, em), column width\n// (px, em), and a border-like declaration if you want a column rule. This\n// follows exactly with the css3 spec, it's just quicker.\n// \n// ex. columns()\n// ex. columns: 5\n// ex. columns(8, 15px, 200px, '1px solid red')\n\ncolumns(count=3, gap=30px, width=null, rule=null)\n  column-count: count\n  column-gap: gap\n  column-width: width if width\n  column-rule: unquote(rule) if rule\n\n// Mixin: Avoid Column Break\n// \n// If you have a list that is broken into columns, this will make sure that the\n// list item is not split across columns awkwardly. Works only in webkit at the\n// moment.\n// \n// ex. avoid-column-break()\n\navoid-column-break()\n  column-break-inside: avoid\n\n// Mixin: Triangle\n// \n// One of my favorites. Makes a little css triangle for you. Pass it a direction\n// (up, down, left, right), size (in pixels), and a color.\n// \n// ex. triangle()\n// ex. triangle: 'down' 15px blue\n\ntriangle(direction='up', size=10px, color=#000)\n  width: 0\n  height: 0\n  if direction == 'up'\n    border-left: size solid transparent\n    border-right: size solid transparent\n    border-bottom: size solid color\n  else if direction == 'down'\n    border-left: size solid transparent\n    border-right: size solid transparent\n    border-top: size solid color\n  else if direction == 'left'\n    border-top: size solid transparent\n    border-bottom: size solid transparent\n    border-right: size solid color\n  else if direction == 'right'\n    border-top: size solid transparent\n    border-bottom: size solid transparent\n    border-left: size solid color\n\n// Mixin: Sprite\n// \n// Given a direction in which your sprites are aligned (horizontal/vertical) and\n// an iteration, will measure the width/height of your first sprite frame and\n// step through to the nth next one, depending on the given iteration number.\n// Width/height must be defined for this to work (as is the case for any sprite)\n// \n// ex. sprite: 2\n// ex. sprite: 5 'horizontal'\n// \n// TODO: Try using image-size here if @width or @height aren't defined\n\nsprite(iteration, orientation='vertical')\n  if orientation == 'vertical'\n    background-position: 0 unit(@height*-1*iteration, 'px')\n  else if orientation == 'horizontal'\n    // warn(unit(@width*iteration, 'px'))\n    background-position: unit(@width*iteration, 'px') 0\n\n// Alias: group\n// Clearfix with a better name. Excellent for wrangling floats.\n\ngroup = clearfix\n\n// Alias: Inline Block\n// Cross browser inline block display. Saves many IE headaches.\n\ninline-block()\n  display: inline-block\n\n  if support-for-ie\n    display: -moz-inline-stack\n    vertical-align: baseline\n    zoom: 1\n    *display: inline\n    *vertical-align: auto\n\n// Mixin: Vertically Align\n// \n// Cross browser vertical align. Works down to IE9.\n// \n// ex. vertically-align()\n\nvertically-align()\n  position: relative\n  top: 50%\n  transform: translateY(-50%)\n\n// Mixin: Media\n// \n// Based on Nicole Sullivan's media class, made famous by Facebook\n// http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-\n// hundreds-of-lines-of-code\n// \n// Put this on a parent and it will split the first two children left and right,\n// like you would with perhaps a comment with an avatar to the left. Pass it a\n// margin between the two. Explained fully here:\n// http://carrotblog.com/css-patterns-evolved/\n// \n// This mixin works right when the element you apply it to has two or three\n// direct children. The first one will float to the left, the second one will be\n// to the right of the first, and third will go farthest right.\n// \n// ex. media()\n// ex. media: 15px\n// ex. media: 15px 10px\n\nmedia(margin=10px)\n\n  left-margin = margin\n  right-margin = margin\n\n  if length(arguments) > 1\n    left-margin = arguments[0]\n    right-margin = arguments[1]\n\n  overflow: hidden\n  zoom: 1\n\n  & > *\n    inline-block()\n    overflow: hidden\n  & > *:first-child\n    float: left\n    margin-right: right-margin\n  & > *:nth-child(3)\n    float: right\n    margin-left: left-margin\n\n// Mixin: Raquo\n// \n// Because technically raquo is not semantic, it's better to add it like this.\n// \n// ex. raquo()\n\nraquo()\n  &:after\n    content: \" \\00BB\"\n\n// Mixin: Font Face\n// \n// Super simple font-face declaration. Just give the name and the folder it\n// lives in. Make sure the font name matches the name of the files. Uses the\n// fontspring syntax:\n// http://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax\n// \n// ex. font-face(proxima-nova, '/fonts')\n\nfont-face(name, folder, weight='normal', style='normal')\n  @font-face\n    font-family: name\n    src: url(folder unquote('/') name unquote('.eot') '?#iefix') format('embedded-opentype'), url(folder unquote('/') name unquote('.woff')) format('woff'), url(folder unquote('/') name unquote('.ttf')) format('truetype'), url(folder unquote('/') name unquote('.eot') unquote('#') name) format('svg');\n    font-weight: unquote(weight)\n    font-style: unquote(style)\n\n// Mixin: Debug\n// \n// Debugging tool - drop this at root level in your css and it will put borders\n// on every element so you can see what's up. It will also flag them if you made\n// mistakes like put in inline styles, forgot an alt on an image, left the alt\n// blank, etc. For god's sake don't use this in production. All credit for this\n// goes to intuit.css, from which I adapted it (and improved it a bit).\n// https://github.com/csswizardry/inuit.css\n\ndebug()\n  html\n\n    div\n      border: 1px solid green\n\n    [style], style\n      border: 5px solid yellow\n\n    style\n      border: block\n\n    img\n      border: 5px solid red\n\n    img[alt]\n      border-color: green\n\n    img[alt=\"\"]\n      border-color: yellow\n\n    a\n      border: 5px solid yellow\n\n    a[title]\n      border-color: green\n\n    a[href=\"#\"]\n      outline-color: yellow\n\n    a[target]\n      border-color: red\n\n    [class=\"\"], [id=\"\"]\n      border: 5px solid yellow\n\n// Custom animation timing functions, ported from bourbon\n// https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/addons/_timing-functions.scss\n\n// ease-in\nease-in-quad =      cubic-bezier(0.550,  0.085, 0.680, 0.530)\nease-in-cubic =     cubic-bezier(0.550,  0.055, 0.675, 0.190)\nease-in-quart =     cubic-bezier(0.895,  0.030, 0.685, 0.220)\nease-in-quint =     cubic-bezier(0.755,  0.050, 0.855, 0.060)\nease-in-sine =      cubic-bezier(0.470,  0.000, 0.745, 0.715)\nease-in-expo =      cubic-bezier(0.950,  0.050, 0.795, 0.035)\nease-in-circ =      cubic-bezier(0.600,  0.040, 0.980, 0.335)\nease-in-back =      cubic-bezier(0.600, -0.280, 0.735, 0.045)\n\n// ease-out\nease-out-quad =     cubic-bezier(0.250,  0.460, 0.450, 0.940)\nease-out-cubic =    cubic-bezier(0.215,  0.610, 0.355, 1.000)\nease-out-quart =    cubic-bezier(0.165,  0.840, 0.440, 1.000)\nease-out-quint =    cubic-bezier(0.230,  1.000, 0.320, 1.000)\nease-out-sine =     cubic-bezier(0.390,  0.575, 0.565, 1.000)\nease-out-expo =     cubic-bezier(0.190,  1.000, 0.220, 1.000)\nease-out-circ =     cubic-bezier(0.075,  0.820, 0.165, 1.000)\nease-out-back =     cubic-bezier(0.175,  0.885, 0.320, 1.275)\n\n// ease-in-out\nease-in-out-quad =  cubic-bezier(0.455,  0.030, 0.515, 0.955)\nease-in-out-cubic = cubic-bezier(0.645,  0.045, 0.355, 1.000)\nease-in-out-quart = cubic-bezier(0.770,  0.000, 0.175, 1.000)\nease-in-out-quint = cubic-bezier(0.860,  0.000, 0.070, 1.000)\nease-in-out-sine =  cubic-bezier(0.445,  0.050, 0.550, 0.950)\nease-in-out-expo =  cubic-bezier(1.000,  0.000, 0.000, 1.000)\nease-in-out-circ =  cubic-bezier(0.785,  0.135, 0.150, 0.860)\nease-in-out-back =  cubic-bezier(0.680, -0.550, 0.265, 1.550)\n\n// Function: cached-image-url\n// \n// An alternative to url() that stores images in a cache for use in\n// cache-images().\n\nbackground-images = null\n\ncached-image-url()\n  base = ''\n  s = unquote('url(\"' + base + join('', arguments) + '\")')\n  push(background-images, s) unless s in background-images\n  url(arguments)\n\n// Mixin: Cache Images\n// Use this at the end of all your styles outputs the image cache script.\n\ncache-images()\n  body:after\n    display: none\n    content: background-images\n","// -------\n// Buttons\n// -------\n\n// Function: highlight\n// \n// Adds a light brighter line across the top of the element for a perspective\n// effect. Takes an optional argument for strength, which takes a value between\n// 0 and 1.\n// \n// ex. highlight()\n// ex. highlight: .7\n\n-highlight(strength = .3)\n  box-shadow(s(\"inset 0 1px 0 %s\", rgba(255,255,255,strength)))\n\n// Function: parse\n// Used internally for setting button sizes.\n\n-parse(size)\n  if size == \"small\"\n    return 10\n  else if size == \"medium\"\n    return 13\n  else if size == \"large\"\n    return 18\n  else\n    return size\n\n// Mixin: Button\n// \n// Creates a very basic looking button style. Three optional params:\n// - color: Takes any color, defaults to the default global color\n// - size: Takes 'small', 'medium', 'large', or an integer. The numbers reflect\n//   the font size for the text inside the button, but scales all other aspects\n//   as well (corners, padding, etc).\n// - textColor: Takes any color for the button text, defaults to trying to\n//   detect whether the background is dark or light and setting the opposite.\n// \n// ex. button()\n// ex. button: blue\n// ex. button: #D4513B\n// ex. button: green large\n// ex. button: #4C82D4 24\n\nbutton(color = default-color, size = \"medium\", textColor = null)\n\n  // color detection and changes\n  textColor = (light(color) ? #494949 : #fff) unless textColor\n  parsed_size = -parse(size)\n\n  // now that we've got numbers, let's work some proportions\n  height = round((parsed_size * 1.53px) / 2)\n  width = round(((parsed_size * 1.53px) * 2.2) / 2)\n\n  // dynamically calculated styles\n  font-size: unit(parsed_size, 'px')\n  padding: unit(height, 'px') unit(width, 'px')\n  border-radius: round(parsed_size / 4.33333px)\n  background-color: color\n  color: textColor\n\n  // constant styles\n  cursor: pointer\n  font-weight: bold\n  font-family: font-stack\n  line-height: 1em\n  text-align: center\n  text-decoration: none\n  display: inline-block\n  border none\n  &:hover, &:focus\n    background-color: darken(color, 5%)\n    color: darken(textColor, 3%)\n\n  &:active\n    background-color: darken(color, 10%)\n\n// Mixin: Glossy Button\n// \n// Creates a more fancy looking button style. Five optional params:\n// - color: Takes any color, defaults to the default global color\n// - size: Takes 'small', 'medium', 'large', or an integer. The numbers reflects\n//   the font size for the text inside the button, but scales all other aspects\n//   as well.\n// - textColor: Takes any color for the button text, defaults to trying to\n//   detect whether the background is dark or light and setting the opposite.\n// - shadowColor: Color for the text shadow, default is the contrast detection\n//   described above.\n// - hoverColor: Color of the text shadow when hovered. Default is contrast\n//   detection as described above. You probably don't need to use this.\n// \n// ex. glossy-button()\n// ex. glossy-button: blue\n// ex. glossy-button: #D4513B\n// ex. glossy-button: green large\n// ex. glossy-button: #4C82D4 24\n\nglossy-button(color = default-color, size = \"medium\", textColor = null, shadowColor = null, hoverColor = null)\n\n  // color detection and changes\n  if textColor\n    darkText = light(textColor) ? true : false\n  else\n    darkText = light(color) ? false : true\n    textColor = darkText ? white : #494949\n\n  shadowColor = darkText ? rgba(#000,.1) : rgba(#fff,.3) unless shadowColor\n  hoverColor = darkText ? rgba(#000,.2) : rgba(#fff,.5) unless hoverColor\n  downShadow = darkText ? 0 -1px 1px rgba(#000,.2) : 1px 1px 1px rgba(#fff,.6)\n\n  // parse words, make sure it's a number\n  parsed_size = -parse(size)\n\n  // now that we've got numbers, let's work some proportions\n  height = round((parsed_size*1.53px)/2)\n  width = round(((parsed_size*1.53px)*2.2)/2)\n\n  // dynamically calculated styles\n  font-size: unit(parsed_size, 'px')\n  padding: unit(height, 'px') unit(width, 'px')\n  border-radius: round(parsed_size/4.33333px)\n  gradient: color\n  text-shadow: 1px 1px 1px shadowColor\n  border: s('1px solid %s', darken(color, 10%))\n  color: textColor\n\n  // constant styles\n  -highlight()\n  cursor: pointer\n  font-weight: bold\n  font-family: font-stack\n  line-height: 1em\n  text-align: center\n  text-decoration: none\n  display: inline-block\n\n  &:hover, &:focus\n    background-position: 0 unit(height * -1, 'px')\n    color: darken(textColor, 3%)\n    text-shadow: 1px 1px 1px hoverColor\n\n  &:active\n    box-shadow(s(\"inset 0 1px %s %s\", parsed_size/2.6px, rgba(darken(color, 25%),.6)))\n    text-shadow: downShadow\n    border-color: darken(color, 18%)\n\n// Mixin: Button Disabled\n// \n// Add this mixin to a button and it will make the button appear to be disabled.\n// Try attaching to a class like .disabled and adding that class to the button.\n// Takes no arguments.\n// \n// ex. .disabled\n//       button-disabled()\n\nbutton-disabled()\n  background: #ccc\n  border-color: darken(#ccc, 10%)\n  opacity: .5\n  cursor: default\n  no-select()\n\n  &:hover\n    background: #ccc\n    background-position: 0 0\n    \n  &:active\n    background: #ccc\n    box-shadow: none\n    border-color: darken(#ccc, 10%)\n    text-shadow: 1px 1px 1px rgba(#000,.1)\n\n// Additive Mixin: Buttons\n// \n// WARNING: Creates classes in your css and styles them - not to be used inside\n// an element.\n// \n// This mixin makes it such that you can use classes to define buttons on your\n// page.\n// - .btn: creates a simple button\n// - .btn-fancy: creates a fancy button\n// - .disabled: disables an existing button (will only work on .btn and\n//   .btn-simple)\n\nbuttons()\n  .btn\n    transition()\n    button()\n  .btn-fancy\n    transition()\n    glossy-button()\n  .btn.disabled, .btn-simple.disabled\n    button-disabled()\n"]}